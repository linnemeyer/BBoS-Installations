
--trunctated temp_commo_log because the dates where not coming in as dates, so I modified the temp table and had to use the format mask
--   DD"-"MON"-"RR HH"."MI"."SS PM
-- truncate bb_calendar_events and just reload data_cur from txt export

truncate table bb_calendar_events

-- this generates the update procedures
BEGIN generate_update_proc ('bb_orders', 'order_id', 'temp_orders'); 
      generate_update_proc ('bb_install_parts', 'install_part_id', 'temp_install_parts'); 
      generate_update_proc ('bb_commo_log', 'log_id', 'temp_commo_log'); 
END;

-- execute the update procedures
begin update_bb_orders; end;
begin update_bb_install_parts; end;
begin update_bb_commo_log; end;

-- remove deleted items
delete from bb_commo_log where order_id in (
select order_id from bb_orders where order_id not in (select order_id from temp_orders))

delete from bb_install_parts where order_id in (
select order_id from bb_orders where order_id not in (select order_id from temp_orders))

delete from bb_orders where order_id not in (select order_id from temp_orders)

delete from bb_install_parts where install_part_id not in (select install_part_id from temp_install_parts)

delete from bb_commo_log where log_id not in (select log_id from temp_commo_log)



select count(*) from temp_commo_log
select count(*) from bb_orders -- 1775
select count(*) from bb_install_parts -- 2307
select count(*) from bb_commo_log -- 867


create or replace PROCEDURE generate_update_proc 
   (p_table_name in varchar2, p_pk1 in varchar2, p_temp_table_name in varchar2) as
	v_statement   varchar2(30000);
	v_first_time  boolean := true;
	v_nvl         varchar2(20);
	v_table_name  varchar2(100);
	v_pk1         varchar2(50);
	v_new_col     varchar2(50);
	v_old_col     varchar2(50);

   cursor col_cur (p_table_name varchar) is
      select column_name, data_type, nullable
        from user_tab_cols
       where table_name = p_table_name
         and column_name not in ('CREATED_BY2', 'CREATED_ON2',
                                 'UPDATED_BY2', 'UPDATED_ON2',
                                 v_pk1)
		order by nullable;
BEGIN
   v_table_name := upper(p_table_name);
   v_pk1 := upper(p_pk1);
   v_statement :=
'create or replace procedure UPDATE_' || v_table_name ||' is
      cursor data_cur is
	     select *
		   from ' || p_temp_table_name ||'
          where '||p_pk1||' in (select '||p_pk1||' from '|| p_table_name ||' ) ;

	v_max_id number;
BEGIN
   /* THIS PROCEDURE WAS GENERATED BY THE GENERATE_UPDATE_PROC  */

   --- update the existing records 
   for it in data_cur loop 
     update ' || p_table_name ||'
        set ';
   
    for it in col_cur(v_table_name) loop
	   if v_first_time then 
			v_first_time := false;
			v_statement := v_statement ||lower(it.column_name)||' = it.'||lower(it.column_name);
		else
			v_statement := v_statement ||','||chr(10)||
           '            '||lower(it.column_name)||' = it.'||lower(it.column_name);
		end if;
	end loop;
	v_first_time := true;
	
	v_statement := v_statement ||chr(10)||
           '      where '||p_pk1||' = it.'||p_pk1||';
    end loop;
	
	--- insert the new records
		  
	insert into ' || p_table_name ||' ( 
	        '||p_pk1;
	
	for it in col_cur(v_table_name) loop
	   v_statement := v_statement ||','||chr(10)||
           '            '||lower(it.column_name);
	end loop;
	v_statement := v_statement ||' )
     select ' ||p_pk1;
	 
	for it in col_cur(v_table_name) loop
	   v_statement := v_statement ||','||chr(10)||
           '            '||lower(it.column_name);
	end loop;	
	v_statement := v_statement ||chr(10)||
           '       from ' || p_temp_table_name ||'
        where '||p_pk1||' not in (select '||p_pk1||' from  ' || p_table_name ||' );
END; ';
   execute immediate v_statement;
end;